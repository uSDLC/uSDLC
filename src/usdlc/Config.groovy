/*
 * Copyright 2011 Paul Marrington for http://usdlc.net
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package usdlc

import java.lang.reflect.Method

/**
 * Wrapper for configSlurper so we can access multiple configuration files easily. You will still need to restart
 * the usdlc.server.servletengine.server to pick up a new config.
 *
 * Config.port
 * Config.defaultScriptEngine
 *
 * User: Paul Marrington
 * Date: 23/11/10
 * Time: 9:35 PM
 */

class Config {
	/**
	 * Build up the expected classpath from configuration details.
	 */
	@Lazy static def classPath = {
		// Run through them all and add to the uSDLC classpath - so that compilers behave
		Method method = URLClassLoader.class.getDeclaredMethod("addURL", [URL.class] as Class[])
		method.accessible = true

		def cp = []
		Config.srcPath.each { cp << Store.base(it).path }

		Config.libPath.each {
			Store.base(it).dirs(~/.*\.jar$/).each {
				method.invoke(ClassLoader.systemClassLoader, [Store.absolute(it).url] as Object[])
			}
		}
		return cp as String[]
	}()
	/**
	 * Retrieve classpath string as expected by Java
	 */
	@Lazy static classPathString = Config.classPath.join(';')
	@Lazy static tableVersions = {  // auto-generated by and when building application jar
		def properties = new Properties()
		Store.base().dirs(~/WEB-INF\/.*TableVersions.properties/) {
			new File(it as String).withInputStream { stream -> properties.load(stream) }
		}
		return properties
	}()
	/**
	 * In environments other than 'standalone', use "Config.environment = 'blah'" before Config is used in anger.
	 */
	static environment = "standalone"
	/**
	 * So we can say Environment.blah and get an environment variable called blah directly.
	 */
	static {
		Config.metaClass.static.propertyMissing = { name ->
			if (!properties.containsKey(name)) {
				System.err.println "Missing property: Config.$name"
				return null
			}
			return properties."$name"
		}
	}
	static commandLine = [baseDirectory: "web"]
	static baseDirectory

	static setBaseDirectory(to) {
		to = (to.replaceAll('\\\\', '/') + '/').replaceAll('//', '/')
		baseDirectory = commandLine.baseDirectory = to
	}

	static commandLine(args) {
		commandLine += Dictionary.commandLine(args)
		baseDirectory = commandLine.baseDirectory
	}

	@Lazy private static properties = {
		def configFile = new File("$Config.commandLine.baseDirectory/WEB-INF/web.groovy")
		def configFileContents = new ConfigSlurper(Config.environment).parse(configFile.toURI().toURL())
		def value = configFileContents + Config.commandLine
		Config.baseDirectory = value.baseDirectory
		return value
	}()
}
