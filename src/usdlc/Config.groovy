/*
 * Copyright 2011 Paul Marrington for http://usdlc.net
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package usdlc

import java.lang.reflect.Method

/**
 * Wrapper for configSlurper so we can access multiple configuration files easily. You will still need to restart
 * the usdlc.server.servletengine.server to pick up a new config.
 *
 * Config.port
 * Config.defaultScriptEngine
 *
 * User: Paul Marrington
 * Date: 23/11/10
 * Time: 9:35 PM
 */

class Config {
	public static Config config = new Config()
	/**
	 * Build up the expected classpath from configuration details.
	 */
	@Lazy static def classPath = {
		// Run through them all and add to the uSDLC classpath - so that compilers behave
		Method method = URLClassLoader.class.getDeclaredMethod("addURL", [URL.class] as Class[])
		method.accessible = true

		def cp = []
		config.srcPath.each { cp << Store.base(it).path }

		config.libPath.each { path ->
			Store.base(path).dirs(~/.*\.jar$/).each { String fileName ->
				def params = [Store.base("$path/$fileName").url] as Object[]
				method.invoke(ClassLoader.systemClassLoader, params)
			}
		}
		return cp as String[]
	}()
	/**
	 * Retrieve classpath string as expected by Java
	 */
	@Lazy static classPathString = config.classPath.join(';')
	@Lazy static tableVersions = {
		// auto-generated by and when building application jar
		def properties = new Properties()
		def webInf = Store.base('WEB-INF')
		webInf.dirs(~/.*TableVersions.properties/) { String fileName ->
			webInf.withInputStream(fileName) { stream -> properties.load(stream) }
		}
		return properties
	}()
	/**
	 * In environments other than 'standalone', use "config.environment = 'blah'" before Config is used in anger.
	 */
	static environment = "standalone"
	/**
	 * So we can say Environment.blah and get an environment variable called blah directly.
	 */
	def propertyMissing(name) {
		def property
		if (!properties.containsKey(name)) {
			System.err.println "Missing property: config.$name"
			property = null
		}
		property = properties."$name"
		return property
	}

	static commandLine = [baseDirectory: "web"]
	static String baseDirectory

	static setBaseDirectory(to) {
		to = (to.replaceAll('\\\\', '/') + '/').replaceAll('//', '/')
		baseDirectory = commandLine.baseDirectory = to
	}

	static commandLine(String[] args) {
		commandLine += Dictionary.commandLine(args)
		baseDirectory = commandLine.baseDirectory
	}

	@Lazy private static properties = {
		def configFile = new File("$config.commandLine.baseDirectory/WEB-INF/web.groovy")
		def configFileContents = new ConfigSlurper(config.environment).parse(configFile.toURI().toURL())
		def value = configFileContents + config.commandLine
		config.baseDirectory = value.baseDirectory
		return value
	}()
}
