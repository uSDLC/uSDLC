/*
 * Copyright 2011 Paul Marrington for http://usdlc.net
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package usdlc

import java.lang.reflect.Method

/**
 * Wrapper for configSlurper so we can access multiple configuration files easily. You will still need to restart
 * the usdlc.server.servletengine.server to pick up a new config.
 *
 * Config.port
 * Config.defaultScriptEngine
 *
 * User: Paul Marrington
 * Date: 23/11/10
 * Time: 9:35 PM
 */

class Config {
	/**
	 * Build up the expected classpath from configuration details.
	 */
	@Lazy static def classPath = {
		def cp = []
		Config.srcPath.each {
			cp << it
		}
		Config.libPath.each {
			cp += Store.base(it).dirs(~/.*\.jar$/)
		}
		// Run through them all and add to the uSDLC classpath - so that compilers behave
		cp.each {
			Method method = URLClassLoader.class.getDeclaredMethod("addURL", [URL.class] as Class[])
			method.accessible = true
			method.invoke(ClassLoader.systemClassLoader, [Store.base(it).toURL()] as Object[])
		}
		return cp += System.getProperty('java.class.path').split(';')
	}()
	/**
	 * Retrieve classpath string as expected by Java
	 */
	@Lazy static classPathString = Config.classPath.join(';')
	@Lazy static tableVersions = {  // auto-generated by and when building application jar
		def properties = new Properties()
		Store.root().dirs(~/WEB-INF\/.*TableVersions.properties/) {
			new File(it as String).withInputStream { stream -> properties.load(stream) }
		}
		return properties
	}()
	/**
	 * In environments other than 'standalone', use "Config.environment = 'blah'" before Config is used in anger.
	 */
	static environment = "standalone"
	/**
	 * So we can say Environment.blah and get an environment variable called blah directly.
	 */
	static {
		Config.metaClass.static.propertyMissing = { name ->
			if (!properties.containsKey(name)) {
				System.err.println "Missing property: Config.$name"
				return null
			}
			return properties."$name"
		}
	}
	@Lazy private static properties = new ConfigSlurper(Config.@environment).parse(new File("WEB-INF/web.groovy").toURL())
}
