/*
 * Copyright 2011 the Authors for http://usdlc.net
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package usdlc

import java.lang.reflect.Method

/**
 * Wrapper for configSlurper so we can access multiple configuration files easily. You will still need to restart
 * the usdlc.server.servletengine.server to pick up a new config.
 */

class Config {
	public static Map config
	static loaded
	/**
	 * Must be called early on by the server main program to initialise the configuration.
	 */
	static load(String environment, String baseDirectory, argList) {
		def configUrl = new File(baseDirectory, '/Options/Configuration/ConfigSlurper.groovy').toURI().toURL()
		config = new ConfigSlurper(environment).parse(configUrl)
		config.baseDirectory = baseDirectory
		Dictionary.commandLine(argList).each { String key, String value -> config[key] = value }
		buildClassPath()
		config.classPathString = config.srcPath.join(';')
		config.tableVersions = loadTableVersions()
		loaded = true
	}
	static private buildClassPath() {
		// Run through them all and add to the uSDLC classpath - so that compilers behave
		Method method = URLClassLoader.class.getDeclaredMethod('addURL', [URL.class]as Class[])
		method.accessible = true

		config.classPath = []

		config.libPath?.each { path ->
			Store.base(path).dirs(~/.*\.jar/).each { String fileName ->
				def url = Store.base("$path/$fileName").url
				method.invoke(ClassLoader.systemClassLoader, [url]as Object[])
				config.classPath << url
			}
		}
		config.srcPath = config.srcPath?.collect {  toURL(it)  } ?: []
		config.srcPath.each { config.classPath << it }
		//config.dslClassPath = config.dslClassPath?.collect { toURL(it) } ?: []

		System.getProperty("java.class.path").
				split(/${System.getProperty("java.path.separator")}/).each {
					config.classPath << new File(it).toURI().toURL()
				}
	}
	static private toURL(path) {
		(path.indexOf(':') > 1) ? new URL(path) : Store.base(path).url
	}
	private static Properties loadTableVersions() {
		// auto-generated by and when building application jar
		def properties = new Properties()
		def webInf = Store.base('WEB-INF')
		webInf.dirs(~/.*TableVersions.properties/) { String fileName ->
			webInf.withInputStream(fileName) { InputStream stream -> properties.load(stream) }
		}
		properties
	}
}
