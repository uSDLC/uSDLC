$ ->
  usdlc.highlight = (colour, element) ->
    section = usdlc.getSection(element)
    if section
      if colour
        url = "url(/usdlc/rt/gradients/#{colour}-right.png)"
        section.css(
          backgroundImage : url
          backgroundPosition : -10
        )
      else
        section.css(backgroundImage : 'none')

  usdlc.green = (element) -> usdlc.highlight('green', element)
  ###
  Given an element (null for current focus), retrieve the section
  containing it.
  ###
  usdlc.getSection = (element) ->
    section = $(element or usdlc.inFocus)
    if not section.hasClass('editable')
      section = section.parents('div.editable')
    section
  ###
  Each paragraph is a focus element. Highlight it if clicked on or
  otherwise referenced to. inFocus used for first load after click.
  ###
  usdlc.setFocus = (element) ->
    section = usdlc.getSection(element)
    #if not section.hasClass('inFocus')
    if section.attr('id') isnt usdlc.inFocus?.attr('id')
      usdlc.clearFocus()
      usdlc.inFocus = section
      usdlc.resetMenu()
      section.addClass('inFocus ui-widget-content')
      usdlc.unsetTreeFocus(usdlc.contentTreeContainer)
      usdlc.setTasklistFocus(section)
      usdlc.pageContentsSausages.sausage("setFocus", section)
      url = window.location.hash.split('@')
      window.location.hash = url[0] + '@' + section.attr('id')
      # usdlc.scrollTo section
    return section

  usdlc.clearFocus = ->
    inTasklist = false
    if usdlc.inFocus
      inTasklist = usdlc.inTasklist()
      usdlc.menuToTop()
      $('.inFocus').removeClass('inFocus ui-widget-content')
      usdlc.lastFocus = usdlc.inFocus
      usdlc.inFocus = null
#      url = window.location.hash.split('@')
#      window.location.hash = url[0]
    $('.inFocus').removeClass('inFocus ui-widget-content')
    if inTasklist
      usdlc.savePage()
      usdlc.unsetTreeFocus(inTasklist)
    usdlc.setContentTreeFocus()

  usdlc.toggleFocus = ->
    if usdlc.inFocus
      usdlc.clearFocus()
    else
      usdlc.setFocus(usdlc.lastFocus || $('div.section:first'))

  usdlc.inFocus = null
  usdlc.lastFocus = null

  usdlc.nextSectionId = ->
    id = $('.section').length + 1
    id++ while ($('div#s' + id).length > 0)
    "s#{id}"

  usdlc.sectionIsReferenceTo = (section = usdlc.inFocus) ->
    a = $ ".sectionType a", section
    return if a.size() then a else null

  usdlc.upFocus = ->
    return true unless usdlc.inFocus
    focus = usdlc.inFocus.prevAll('div.section:not(.deleted)').first()
    usdlc.setFocus(focus) if focus.length
    return false

  usdlc.downFocus = ->
    return true unless usdlc.inFocus
    focus = usdlc.inFocus.nextAll('div.section:not(.deleted)').first()
    if focus.size()
      usdlc.setFocus(focus)
    else
      usdlc.upFocus()
  ###
  Parse section title, subtitle, content, id and name (camel-case)
  ###
  usdlc.parseSection = (section) ->
    header = section.children('h1,h2,h3,h4,h5,h6').first()
    title = header.text()
    section.data =
      title : title
      subtitle : '...'
      content : header.nextAll()
      id : section.attr('id')
      name : usdlc.camelCase(title)
      header : header
      type: section.attr('type')
    if section.data.title.length > 32
      section.data.subtitle = section.data.title
      section.data.title = section.data.title.substring(0, 32)
      section.data.name = usdlc.camelCase(section.data.title)
    return section.data
  ###
  Process the HTML and save he section
  ###
  usdlc.saveSection = ($section) ->
    baseId = "#{$section.attr('id')}a"
    # Process links to see what they should do
    $('a', $section).removeAttr('action').each( (idx) ->
      self = $(this)
      targetId = baseId + idx
      self.attr('id', targetId) if not self.attr('id')
      href = self.attr('href')
      self.removeClass() # removes all classes so we can re-add
      return if not href
      lastChar = href.charAt(href.length - 1)
      endsInBang = (lastChar == '!')
      if endsInBang
        self.attr('action', 'download')
      else if href.indexOf(':') is -1 and href[0] isnt '#'
        self.addClass('usdlc')

        if href[0] == '~'
          href = "/#{href}"
          self.attr('href', href)
        isRef = (lastChar == '/') or /^.?~.+@s\d+$/.test(href)
        if not isRef
          href = usdlc.camelCase(href)
          self.attr('href', href)
        isParent = (href is '..')
        isRef = /^.?~.+@s\d+$/.test(href)
        isPage = isParent or isRef or /^\w+$/.test(href)
        isHtml = isPage or
          (usdlc.mimeType(href).clientExt in ['html', 'gsp'])

        if isHtml
          self.attr('action', 'page')
        else
          if not self.attr('action')
            self.attr('action', 'runnable')
          self.addClass('sourceLink')
    )
    usdlc.checkForSynopsis($section)
    usdlc.savePage()
  ###
  Delete a section - by making it invisible
  ###
  usdlc.deleteSectionInFocus = ->
    if usdlc.inFocus and not usdlc.inFocus.hasClass('deleted')
      usdlc.classify(usdlc.inFocus, 'deleted')
  ###
  restore a deleted section
  ###
  usdlc.undeleteSectionInFocus = ->
    if usdlc.inFocus?.hasClass('deleted')
      usdlc.classify(usdlc.inFocus, 'deleted')
      usdlc.toggleShow()
  ###
  Toggle hiding and showing deleted sections
  ###
  usdlc.toggleShow = ->
    toggle = (type) ->
      show = "show#{type}"
      dotType = ".#{type}"
      if $(".#{show}").size()
        usdlc.downFocus() if usdlc.inFocus.hasClass(type)
        $(dotType).removeClass(show)
      else
        $(dotType).addClass(show)
    toggle 'deleted'
  ###
  Load a page from disk and return the named section
  ###
  usdlc.loadSection = (name, page, action) ->
    split = name.split('#')
    if split.length > 1 then [page,name] = split
    first = page[0]
    if first isnt '~' and first isnt '/'
      page = "~uSDLC/usdlc/Environment/Configuration/Templates/#{page}"

    $.get usdlc.serverActionUrl(page, 'raw'), (data) ->
      html = $("<div/>").html(data)
      $('.template', html).removeClass('template')
      action $("div.section h1:contains('#{name}'),div.section h2:contains('#{name}')", html)
  ###
  Fold or display a section and all lower sections below it
  ###
  usdlc.foldSections = (section = usdlc.inFocus) ->
    usdlc.classify(section, 'folded')
  ###
  Add or remove class for sectiona and subsections
  ###
  usdlc.classify = (section, className) ->
    usdlc.menuToTop()
    removeClass = not section.hasClass(className)
    sections = usdlc.withSubsections(section)
    if removeClass
      sections.addClass(className)
    else
      sections.removeClass(className)
    usdlc.savePage()
  ###
  return a section and those following with a smaller heading
  ###
  usdlc.withSubsections = (section) ->
    return null if not section
    if section.attr('id') is 's1'
      return section.nextUntil('.footer')

    isSub = (section, depthBelow) ->
      return 0 if section.hasClass('footer')
      header = $('h1, h2, h3, h4, h5, h6', section)
      return 99 if not header.size()
      depth = +(header[0].nodeName[1])
      return 0 if depth <= depthBelow
      return depth

    first = rest = section
    depthBelow = isSub(first, 0)
    return $([]) if depthBelow is 99

    while true
      rest = rest.next('.section')
      break if not rest.size()
      if not isSub rest, depthBelow
        usdlc.setFocus(rest)
        break
      section = section.add(rest)

    return section
  ###
  Anything that has focus can be edited.
  ###
  $('.editable').css('background-image', "none").live('click', (ev) ->
    usdlc.setFocus(ev.currentTarget)
    return true
  )
