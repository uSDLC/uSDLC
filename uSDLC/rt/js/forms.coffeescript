$ ->
  class FormProcessor
    constructor: (selector) ->
      @dom = $ selector
      @fieldMap = {}
      @altMap = {}
      @fieldList = []
      self = this
      $.each @dom.serializeArray(), (i, field) =>
        @fieldMap[field.name] = field.value
        alt = $("[name=#{field.name}]", @dom).attr('alt')
        if not alt
          if field.name[field.name.length - 1] == '_'
            alt = field.name.replace(/_/g, ' ')
          else
            alt = ''
        @altMap[field.name] = alt
        @fieldList.push field.name

    toHtml: ->
      html = []
      for name in @fieldList
        value = @fieldMap[name].replace(/\n/g, '<br>')
        if value.length
          label = @altMap[name]
          if label
            if label[0] is ' ' then html.push ''
            if label.length > 2 and label[0..1] == '::'
              html.push "::<b class='blue'>#{label.substring(2)}</b> #{value}"
            else
              html.push "<b class='blue'>#{label}</b> #{value}"
          else
            html.push value
      return '' if not html.length
      return "<div>#{html.join('<br/>')}</div>".replace(/<br.>::/, '&nbsp;')

    setField: (name, value) ->
      @fieldMap[name] = value
      field = $("[name=#{name}]", @dom)
      field.val value
      field.attr('value', value)

  usdlc.FormProcessor = FormProcessor

  autocomplete = (input, args = {}) ->
    defaults =
      minLength: 0
      change: (ev) -> input.trigger('change')
    parameters = $.extend {}, defaults, args
    input.bind 'focus', (event) -> input.autocomplete('search')
    if parameters.multiple_select or input.attr('multiple_select')
      input.bind "keydown", (event) ->
        # don't navigate away from the field on tab when selecting an item
        if event.keyCode is $.ui.keyCode.TAB
          if $(this).data("autocomplete").menu.active
            event.preventDefault()
      choices = parameters.source
      $.extend parameters,
        source: (request, response) ->
          # delegate back to autocomplete, but extract the last term
          last = request.term.split(/,\s*/).pop()
          response  $.ui.autocomplete.filter choices, last
        focus: -> return false # prevent value inserted on focus
        select: (event, ui) ->
          terms = this.value.split /,\s*/
          terms.pop() # remove the current input
          terms.push ui.item.value # add the selected item
          # add placeholder to get the comma-and-space at the end
          terms.push ''
          this.value = terms.join ', '
          return false
    input.autocomplete parameters

  usdlc.autocomplete = (input, scriptPath, parameters = {}) ->
    input.empty();
    $.get scriptPath, parameters, (response) ->
      parameters.source = eval response
      autocomplete input, parameters

  usdlc.presetAutocomplete = (input, values) ->
    autocomplete input, source: values

  usdlc.loadLocalAutocomplete = (input, parameters = {}) ->
    input.empty()
    key = "localAutocomplete_#{input.attr('name')}"
    values = usdlc.persist(key)?.split(';;')
    if not values?.length or ((values.length is 1) and not values[0])
      values = input.attr('seed')?.split(';;') ? []
    input.removeAttr('seed') if values.length
    parameters.source = values
    autocomplete input, parameters
    input.bind 'blur', (event) ->
      entered = input.val()
      if values.length
        for value in values
          return if value is entered
        values.push entered
        usdlc.persist(key, values.join(';;'))
#      else
#        usdlc.persist(key, statement)

  usdlc.datePicker = (input, params = {}) ->
    input.removeClass 'hasDatepicker'
    defaults = $.extend {},
      defaultDate: input.attr('defaultDate') ? '+1d'
      changeMonth: true
      changeYear: true
      numberOfMonths: 3
      dateFormat: input.attr('dateFormat') ? 'D dd-M-yy'
      onSelect: (selectedDate) ->
        pair = input.attr('pair')
        if pair is 'last'
          first = input.prev('input[activate=datePicker]')
          first.datepicker( "option", "maxDate", selectedDate )
        else if pair is 'first'
          last = input.next('input[activate=datePicker]')
          last.datepicker( "option", "minDate", selectedDate )
        input.attr('value', input.val())
    input.datepicker $.extend defaults, params
