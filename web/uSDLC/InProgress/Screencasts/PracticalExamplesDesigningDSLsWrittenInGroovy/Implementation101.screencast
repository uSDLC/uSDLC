prompt 'Implementation',
    'We are now ready to hand over to our tame coder',
    'Some say he can eat pizza without leaving grease on the keyboardâ€¦'
    'â€¦ All we know is that he is called Albert'
run section 'Simple Query'
prompt 'Page instrumentation',
    '''Setup fails without implementation.'''
edit code 'Database Implementation','''$i
    @Delegate Sql sql 

    static connection(String database, Closure actions) {
        Database connection = new Database(database)

        // This magic allows actions to call database methods implicitly.
        actions.setDelegate(new Database(database))
		
        def result = actions()
        connection.sql.commit()
        result
    }

    /** Open a simple database by URL or config name only */
    private Database(String name) {
        this([url: name])
    }

    private Database(Map properties) {
        sql = Sql.newInstance(properties as Properties)
    }
.'''
select section 'Database Implementation'
prompt 'Delegates',
    '''The magic of delegates in Groovy make DSL work so much easier. Any Groovy SQL
    method can be called on Database because of the delegation on the first line
    of the class.'''
prompt '''By using setDelegate() on our closure we can use all methods within
    the closure braces as unadorned DSL commands. Only when not within a database
    closure do we need to use command explicitly created in gsqlDSL.'''
edit code 'Database Implementation', 
'''$i
    /** Fetch an in-memory database for testing or small temporary functions */ 
    String memoryDb = { "jdbc:h2:mem:$it:$it" }

    /** Given a row from a csv, use the heading to return a list for create */
    String headings(row) {
        def columns = []
        row.each { column, value -> columns << "$column varchar(255)" }
        columns.join(', ')
    }

    /** Wrapper for SQL SELECT command */
    def select(String sql, Closure actions = null) {
        String sel = "select " + sql
        actions ? eachRow(sel, actions) : rows(sel)
    }
    def insert(table, data) {
        create("table actors (${headings data[0]})")
        data.each { row ->
            def columns = []
            row.each { column, value -> columns << "$column='$value'" }
	    insert("actors set ${columns.join(',')}")
        }
    }
    def insert(what) {exec("insert into $what")}
    def sql(script) { assert false, 'not implemented' }
    def create(what) {exec("create $what")}
    def drop(what) {exec("drop $what")}
    def exec(String what) {
        try {
            execute what.toString()
            true
        } catch (e) {
            false
        }
    }
}
.'''
select section 'Database Implementation'
prompt "Validation", 'Give Albert a bag of peanuts. Lets run it to make sure...'
run section 'Simple Query'
prompt 'Green means good'