$ ->
	class usdlc.Ex
		constructor: (@editor) -> @command = @commandLineProcessor
		# ###
		commandLineProcessor: (@cmdline) ->
			@registers[':'] = @cmdline
			@addresses()
			@registers['@'] = @selection
			@commandProcessor @cmdline
		commandProcessor: (@cmdline) ->
			result = ''
			switch chr = @pop()
				when 'a' then @capture(-> @insert @last() + 1)
				when 'c'
					@capture(->
						@delete ''
						@insert @first())
				when 'd' then @delete @cmdline
				when 'g', 'v'
					reverse = @cmdline[0] is '!'
					@pop() if reverse
					@matcher @cmdline
					action = @cmdline
					dot = @getDot()
					for nu in [0...@editor.lineCount()]
						matched = @registers['/'].test @editor.getLine nu
						@setDot nu
						@commandProcessor action if matched isnt reverse
					@setDot dot
				when 'i' then @capture(-> @insert @first())
				when 'j'
					if @cmdline[0] is '!'
						@pop()
						re = /\r*\n/g
						replacment = ''
					else
						re = /\s*\r*\n\s*/g
						replacement = ' '
					@addCountToSelection()
					@editor.setSelection(@editor.getSelection().replace(re, replacement))
				when 'k' then @registers[@pop()] = @registers['@']
				when 'l'
					result = @editor.getSelection().
						replace(/\t/, '^I').replace(/(\r*\n)/, '\$$1')
				when 'm'
					@copy @address()
					@delete ''
				when 'n', '#'
					result = (for nu in @first() to @last()
						"#{nu}: #{@editor.getLine(nu)}").join('\n')
				when 'p'
					if @cmdline[0] == 'u'
						[register] = tail.match(/[^\d\s]/) or '"'
						@insert @getDot(), @editor.getRange @registers[register]...
					else
						@addCountToSelection()
						result = @editor.getSelection()
				when 'q'
					if @pop() == '!'
						@editor.setValue @editor.uneditedContents
				when 's', '&', '~'
					1 # TODO: Complete
				when 't' then @copy @address()
				when 'u' then # undo actions
				when 'w', 'x' then usdlc.saveSource(true)
				when 'y' then buffers[@pop()] = @lines '.'
				when 'z' then # print a window z[+-.^= (top,bot,mid,prev,centre)][count]
				when '@', '*'
					register = @cmdline[0]
					if (/[a-z"\d]/i).test register
						line = @editor.getRange @registers[register]...
					else
						line = @registers[register]
					@commandLineProcessor line
				when '|' then @commandLineProcessor(@cmdline)
				when '"' then # comment
				when '<' then # unindent lines
				when '>' then # indent lines
				when '=' then # print line number of last line
				else @setDot @last() - 1, 0
			result
		textProcessor: (line) ->
			if line is '.'
				@registers['.'] = @captured.join('\n') + '\n'
				@inCapture()
				@command = @commandLineProcessor
			else
				@captured.push line
		registers: []
		buffers: {}
		getDot: -> @editor.lineInfo()?.line or 0
		setDot: (to) -> @editor.setCursor to, 0
		end: -> @editor.lineCount()
		first: -> @registers['@'][0].line
		last: -> @registers['@'][1].line
		capture: (toDoWithIt) ->
			@inCapture = toDoWithIt
			@captured = []
			@command = @textProcessor
		captured: []
		insert: (before, text = @registers['.']) ->
			pos = {line : before, ch : 0}
			@editor.replaceRange text, pos, pos
		copy: (aboveThis) ->
			@insert aboveThis, @editor.getSelection()
		delete : (tail) ->
			@addCountToSelection tail
			[register] = tail.match(/[^\d\s]/) or '"'
			@registers[register] = @editor.getSelection()
			if register is '"'
				@registers[n+1] = @registers[n] for n in [8..1]
				@registers[1] = @registers[register]
			@editor.replaceSelection ''
			@editor.removeLine @first for i in [1..count]
		offset: ->
			if match = @cmdline.match /^([+\-]?\d*)(.*$)/
				@cmdline = match[2]
				+match[1]
			else
				1
		matcher: (line, re) ->
			match = line.match re or /(.*?[^\\])\/(.*)/ 
			[all, re, @cmdline] = if match then match else [line, line, '']
			@registers['/'] = new RegExp re if re
		address: ->
			addr = [0]
			firstChar = @cmdline[0]
			rest = @cmdline.substring 1
			switch firstChar
				when '.'
					@cmdline = rest
					addr[0] = @getDot() + @offset()
				when '$'
					@cmdline = rest
					addr[0] = @end()
				when '-' then addr[0] = @getDot() + @offset()
				when '+' then addr[0] = @getDot() + @offset()
				when "'"
					@cmdline = rest.substring 1
					addr = @registers[rest[0]]
				when '/'
					@matcher rest
					for i in [@getDot()...@end()]
						if @registers['/'].test @editor.getLine(i)
							addr[0] = i
							break
				when '?'
					@matcher rest, /(.*?[^\\])\?(.*)/
					for i in [@getDot() - 1..0]
						if @registers['/'].test @editor.getLine(i)
							addr[0] = i
							break
				else
					addr[0] = (@offset() or @getDot() + 1) - 1
			addr[1] = addr[0]
			addr
		addresses: ->
			pair = @address()
			switch @cmdline[0]
				when ';'
					@setDot(pair[0])
					fallthrough
				when ','
					@pop()
					pair[1] = @address()
				when '%'
					@pop()
					pair[0] = 1
					pair[1] = @end()
			if pair[0] < pair[1] then pair = [pair[1],pair[0]]
			@selection = [{line:pair[0], ch: 0}, {line:pair[1] + 1, ch: 0}]
			@editor.setSelection @selection...
		addCountToSelection: (tail = @cmdline) ->
			range = @selection[1].line - @selection[0].line
			if [count] = (+tail.match(/\d+/) or 1) - range
				@selection[1].line += count
				@editor.setSelection @selection...
		pop: ->
			chr = @cmdline[0]
			@cmdline = @cmdline.substring(1)
			chr || 'default'
		# ##
